"""
Author: David Preda
"""
"""
def bissec(a, b, P, f):
    while abs(b - a) > P:
        m = (a + b)/2;
        if f(a) * f(m) <= 0:
            b = m
        else:
            a = m
    return (a+b)/2;
    

def bissecMax(a, b, f):
    m = (a+b)/2;
    while (m != a and m != b):
        if f(a) * f(m) <= 0:
            b = m
        else:
            a = m
        m = (a+b)/2
    return m;


def regulaFalsi(a, b, f):
    if f(a) * f(b) > 0:
        return "Invalid"
    s = (a*f(b) - b*f(a))/(f(b) - f(a))
    while (s != a and s != b):
        #print("a: ", a, "b: ", b, "s: ", s)
        if f(a) * f(s) <= 0:
            b = s
        else:
            a = s
        s = (a*f(b) - b*f(a))/(f(b) - f(a))
    return s

def newtonRaphson(guess, f, fdiff):
    xn = guess - f(guess)/fdiff(guess);
    while(xn != guess):
        guess = xn;
        xn = guess - f(guess)/fdiff(guess);
    return xn;

def jacobian(xn, yn, f1diffx, f2diffx, f1diffy, f2diffy):
    return (f1diffx(xn, yn) * f2diffy(xn, yn) - f2diffx(xn, yn)*f1diffy(xn, yn))

def hJ(xn, yn, f1, f2, f1diffy, f2diffy):
    return (f1(xn, yn) * f2diffy(xn, yn) - f2(xn, yn)*f1diffy(xn, yn))

def kJ(xn, yn, f1, f2, f1diffx, f2diffx):
    return (f1diffx(xn, yn) * f2(xn, yn) - f2diffx(xn, yn)*f1(xn, yn))

def F1(xn, yn):
    return (xn - 4)**2 + (yn - 4)**2 - 5

def F2(xn, yn):
    return xn**2 + yn**2 - 16

def F1diffx(xn, yn):
    return 2*(xn - 4)

def F1diffy(xn, yn):
    return 2*(yn - 4)

def F2diffx(xn, yn):
    return 2*xn

def F2diffy(xn, yn):
    return 2*yn

def newtonSystem(x_guess, y_guess, f1, f2, f1diffx, f2diffx, f1diffy, f2diffy, Px, Py):
    j = jacobian(x_guess, y_guess, f1diffx, f2diffx, f1diffy, f2diffy)
    xn = x_guess - (hJ(x_guess, y_guess, f1, f2, f1diffy, f2diffy)/j)
    yn = y_guess - (kJ(x_guess, y_guess, f1, f2, f1diffx, f2diffx)/j)
    while(not(abs(xn - x_guess) < Px and abs(yn - y_guess) < Py)):
        x_guess = xn
        y_guess = yn
        print("xn : ", xn, "\nyn : ", yn, "\n")
        j = jacobian(x_guess, y_guess, f1diffx, f2diffx, f1diffy, f2diffy)
        xn = x_guess - (hJ(x_guess, y_guess, f1, f2, f1diffy, f2diffy)/j)
        yn = y_guess - (kJ(x_guess, y_guess, f1, f2, f1diffx, f2diffx)/j)
    return (xn, yn)



def cholesky(a):
    b = []
    c = []
    temp = []
    for j in range(0, len(a[0])):
        temp.append(0)
    for i in range(0, len(a)):
        b.append(copy(temp))
        c.append(temp)
    temp = []
    for i in range(0, len(a[0])):
        b[0][i] = a[i][0]
    for j in range(0, len(a)):
        c[0][j] = a[0][j]/b[0][0]
    return [b, c]
    
matrix = [[3,6,9], [2, 5, -2], [1, 3, -1]]
res = cholesky(matrix)
print(res[0])


x1 = 0
x2 = 0
while x1 <= 2:
    x1 += 0.1
for i in range(0, 21):
    x2 = 0 + i*0.1
print("x1 = ", x1, "x2 = ", x2)
print("x1 == x2: ", x1 == x2)
print("x1 == 2: ", x1 == 2)
print("x2 == 2: ", x2 == 2)"""


#integral of x + y in two dimensions
# integral from 0 to 2 both in x and y
def f(x, y):
    return x + y;

def trapezoid(f, start_x, end_x, start_y, end_y, step_x, step_y):
    return 

